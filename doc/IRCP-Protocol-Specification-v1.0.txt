18 Oct 2023                                                                                                   @jcastro0x

                                        IRCP PROTOCOL SPECIFICATION 1.0
                                        -------------------------------



1. SUMMARY
This document elaborates on the functionality of the IRCPP protocol. It focuses on the technical aspects and how to
implement it in various programming languages or so that it can be used as a guide to understanding the official
implementation in C++.

IRCPP is a TCP-based protocol designed for operation on an IRC-like server, concentrating on:
- Security (server authority)
- Security (encryption)
- Security (user privileges)
- Opcode operations

I understand that this protocol may have many errors and counterproductive considerations, so all kinds of feedback and
assistance are greatly appreciated. Please refer to the MOTIVATION section for more details.

The flowcharts were created using https://asciiflow.com.

2. MOTIVATION
In 2019, a group of former players of the Spanish MMORPG "La Prisión" was created with the intention of recreating
that game using current technologies. The biggest obstacle that the project suffered was the creation of a robust,
secure, fast, and low-cost server.

As a programmer, I have always been interested in the creation of an MMO and I believe that the best way to approach it
is starting with something simple yet complex enough to resemble the final intention.

IRCP fulfills that purpose. By simulating an original IRC server, it has to consider concepts such as rooms, users,
encryption and own sub-programs, which range from rolling dice to a game of chess.

3. TERMINOLOGY
The terminology used in the protocol is detailed below:

    3.01 IRCP
    Internet Relay Chat Plus

    3.02 IRCPP
    Internet Relay Chat Plus Protocol

    3.03 PACKAGE
    A structured set of bytes specifically assembled to contain necessary data for IRCPP

    3.04 SERVER
    The machine or program accepting connections from multiple clients in an IRCPP Network.

    3.05 CLIENT
    The machine or program that initiates connection and communication with the IRCPP Server.

    3.06 LISTENER
    A component in the client or server that waits and listens for PACKAGES over the network.

    3.07 SOCKET
    A software endpoint that establishes bidirectional communication between server and client in the IRCPP Network.

    3.08 LISTENER BEAT
    A scheduled signal sent by the listener to the other socket verifying its active status in the IRCPP Network.

    3.09 HEADER
    The initial part of the PACKAGE containing metadata about the data to be transmitted over IRCPP.

    3.10 PAYLOAD SIZE
    The size of the actual data contained in the PACKAGE excluding the header.

    3.09 LOST

    3.10 HANDSHAKING

    3.11 TIMEOUT-WITH-BYTE-WISE-REFRESH

                     ┌─────┐
                     │BEGIN│
                     └──┬──┘
                        │
        ┌───────────────▼──────────────┐
        │TIMEOUT-WITH-BYTE-WISE-REFRESH│
        └───────────────┬──────────────┘
                        │
              ┌─────────▼────────┐
         ┌─NO─┤RECEIVED 1+ BYTES?├─YES─┐
         │    │(WAIT 5S TILL NO) │     │
         │    └─────────▲────────┘     │
         │              │              │
     ┌───▼─────┐        │          ┌───▼───────────────┐      ┌───┐
     │  FAIL   │        └────NO────┤RECEIVED ALL BYTES?├─YES──►END│
     └─────────┘                   └───────────────────┘      └───┘


4. PACKAGE LAYOUT

  0               1               2               3
  0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
 ┌─────┬───┬─┬─┬─┬───────────────────┬───────────────────────────┐
 │  C  │ R │E│P│O│      OP Code      │        Payload Size       │
 ├─────┴───┴─┴─┴─┴───────────────────┴───────────────────────────┤
 │                            Checksum                           │
 ├───────────────────────────────────────────────────────────────┤
 │                                                               │
 │                              Payload                          │
 │                       ... up to 8192 bits                     │
 │                                                               │
 └───────────────────────────────────────────────────────────────┘
 C=[1..7] R=[1..3] E=1 P=1 O=1
 * 64b to 8256b (8B to 1032B)

4.1 DETAILS

- OP Code      (10 bits) : The operation code that specifies the type of operation to be performed.
- Payload Size (14 bits) : The size (in bytes) of the Payload field. It represents the length of the Payload data.
- Checksum     (32 bits) : Utilized for error-checking the header and data sections of the packet.
- Payload      (?? bits) : The actual data to be transferred. Its length is variable, ranging from 0 to 512 bytes.
- Flags        ( 8 bits) : if C is bigger than 0, this connection was requested to close by C reason.
                           if R is bigger than 0, retransmission is requested by R reason.
                           if P is set, permission error has occurred (this connection has lower required level)
                           if O is set, op-code error has ocurred (not exist)

4.1.1 SOME CONSIDERATIONS
Payload Size has 14 bits, allowing payloads of up to 8192 bits. Added to the 64 bits of the header, this gives us
packets with a maximum size of 1032 bytes. Since the standard MSS of an Ethernet network is 1460 (the standard Ethernet
MTU of 1500 bytes less 20 bytes for the IP header and 20 bytes for the TCP header), it fits very well. Even considering
the subtraction of the 40 bytes of an IPv6 header instead of the 20 bytes of an IPv4, it still functions efficiently.

4.1.1.1 OPTIONAL FLAGS
All flags are optional in the implementation, which allows the server to implement them and the client not. This is
useful for the server to know if an op-code has not been executed on the client side, but not the other way around.

It is expected that:
- The client listens to all flags and acts accordingly
- The client does not send any flags and the server does not listen to them

5 COMMUNICATION BETWEEN SOCKETS

5.1 HANDSHAKING
IRCPP uses a system inspired by TLS to encrypt communication:

1. Once the TCP connection is established, the SERVER sends a UNIQUE RSA public key for the CLIENT.
2. The CLIENT generates an internal AES 128 bits key, caches it, encrypts it with RSA, and sends it back to the server.
3. The server decrypts the AES key and caches it for this client's connection.
4. The server sends an ACK to notify of the successful connection.

          ┌──────┐                     ┌──────┐
          │CLIENT│                     │SERVER│
          └──┬───┘                     └───┬──┘
             │                             │
             ├───────TCP ESTABLISHED───────►
             │                             │
             │                  ┌──────────┴─────────┐
             │                  │GENERATE UNIQUE RSA │
             │                  │PUBLIC KEY 2048 BITS│
             │                  └──────────┬─────────┘
             │                             │
             │                      ┌──────▼─────┐
             ◄──────────────────────┤SEND PUB KEY│
             │                      └──────┬─────┘
  ┌──────────▼──────────┐                  │
  │GENERATE 128b AES KEY│                  │
  └──────────┬──────────┘                  │
             │                             │
     ┌───────▼────────┐                    │
     │ENCRYPT WITH RSA│                    │
     └───────┬────────┘                    │
             │                             │
         ┌───▼─────┐                       │
         │CACHE AES│                       │
         └───┬─────┘                       │
             │                             │
     ┌───────▼─────────┐                   │
     │SEND 128b AES KEY├───────────────────►
     └───────┬─────────┘                   │
             │                             │
             │                        ┌────▼────┐
             ◄───HANDSHAKE COMPLETED──┤CACHE AES│
                                      └─────────┘


5.2 PACKAGE SENDING/RECEIVING

    5.2.1 RECEIVE FLOW

                                                                          ┌─────┐
                                                                          │BEGIN│
                                                                          └──┬──┘
                                                                             │
                                                                     ┌───────▼───────┐
                 ┌───────────────────────────────────────────────────►WAIT FOR HEADER◄─────────────────┐
                 │                                                   └───────┬───────┘                 │
                 │                                                           │                         │
                 │                                            ┌──────────────▼───────────────┐         │
                END                               ┌─C:1──FAIL─┤TIMEOUT-WITH-BYTE-WISE-REFRESH│         │
                 │                                │           └──────────────┬───────────────┘         │
                 │                                │                          │                         │
   ┌─────────────┴────────────────┐           ┌───▼──────┐                   │                         │
   │TIMEOUT-WITH-BYTE-WISE-REFRESH├─FAIL──C:5─►CLOSE CONN│                  END                        │
   └────────────┬─────────────────┘           └──▲───────┘                   │                         │
                │                                │                           │                         │
                │                                │                  ┌────────▼─────────┐               │
         ┌──────┴─────┐                          ├───────C:2──YES───┤PAYLOAD_SIZE > 512│               │
         │    WAIT    │                          │                  └────────┬─────────┘               │
         │CONFIRMATION│                          │                           │                         │
         └──────▲─────┘                          │                           │                         │
                │                                │                           NO                        │
                │                                │                           │                         │
         ┌──────┴───────┐                        │                 ┌─────────▼──────────┐              │
         │RETRANSMISSION│                        │                 │  WAIT FOR PAYLOAD  │              │
         │   REQUEST    │                        │                 │ PAYLOAD_SIZE BYTES │              │
         └──────▲───────┘                        │                 └─────────┬──────────┘              │
                │                                │                           │                         │
                │                                │            ┌──────────────▼───────────────┐         │
                │                                ├─C:3──FAIL──┤TIMEOUT-WITH-BYTE-WISE-REFRESH│         │
                │     ┌─────────────┐            │            └──────────────┬───────────────┘         │
                └─NO──┤CONN_ERRORS>8├──YES──C:4──┘                           │                         │
                      └──────▲──────┘                                       END                        │
                             │                                               │                         │
                    ┌────────┴───────┐                             ┌─────────▼─────────┐               │
                    │CONN_ERRORS += 1◄─────────────────┬─R:1──FAIL─┤CHECKSUM VALIDATION│               │
                    └────────────────┘                 │           └─────────┬─────────┘               │
                                                       │                     │                         │
                                                       │                  SUCCESS                      │
                                                       │                     │                         │
                                                       │               ┌─────▼──────┐                  │
                                                       │               │DECRYPT WITH│                  │
                                                       └─R:2──FAIL─────┤ CACHED AES │                  │
                                                                       └─────┬──────┘                  │
                                                                             │                         │
                                                                          SUCCESS                      │
                                                                             │                         │
                                                                      ┌──────▼──────┐                  │
                                                                      │CHECK OP-CODE├──────FAIL──0:1───┤
                                                                      └──────┬──────┘                  │
                                                                             │                         │
                                                                          SUCCESS                      │
                                                                             │                         │
                                                                       ┌─────▼────┐                    │
                                                                       │CHECK CONN│                    │
                                                                       │ AUTHORITY├────────FAIL──P:1───┤
                                                                       └─────┬────┘                    │
                                                                             │                         │
                                                                          SUCCESS                      │
                                                                             │                         │
                                                                     ┌───────▼────────┐                │
                                                                     │CONN_ERRORS = 0 │                │
                                                                     └───────┬────────┘                │
                                                                             │                         │
                                                                         ┌───▼───┐                     │
                                                                         │EXECUTE│                     │
                                                                         │OP-CODE├─────────FAIL──E:1───┘
                                                                         └───┬───┘
                                                                             │
                                                                          SUCCESS
                                                                             │
                                                                           ┌─▼─┐
                                                                           │END│
                                                                           └───┘


    5.2.2 SEND FLOW
    IRCPP consider two local-buffer when sending data. This allow to still concatenate bytes to send in a back-buffer
    while the main-buffer is still sending through the network.




** TODO **
-Abstract/Summary: Add a brief abstract that outlines what the document covers and its purpose.

-Introduction: A more elaborate introduction would benefit overall comprehension. For example, you could enhance your
'Motivation' section with further information about IRCPP in general, the motivation behind its development and its key
features.

-Glossary: Though you have a terminology section, a more comprehensive glossary could help, especially if more unique or
 complex terms start to emerge in the document.

-Diagrams and Examples: If possible, illustrating the mentioned concepts with some diagrams, flowcharts, or concrete
examples could improve comprehension. For instance, you could illustrate the flow of encrypted communication or the
process when a malformed packet is received.

-Roles and Responsibilities: Clear definitions of the different roles (such as server, client, listener) and their
responsibilities in the protocol will provide further clarity.

-Error Handling: Add more information on error codes, what they mean, and potential methods of resolving standard
issues.

-Security Considerations: Discuss potential security risks and measures to mitigate them. Even if the protocol is meant
to be secure, certain vulnerabilities and weaknesses might still exist.

-Versioning and Updates: If there are plans for future versions of the protocol, providing a section on how upgrades,
versioning or backward compatibility would be handled could be beneficial.

-References/Bibliography: Cite any important literature, specifications, or documents that you've relied upon or that
support your document.

-Validation and Quality Assurance: Detail any validation or QA steps that have been undertaken to ensure the operation
of the protocol.

-Conformance: Include a section on conformance criteria, i.e., what needs to be in place for compliance with the
specifications.
